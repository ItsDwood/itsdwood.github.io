[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Donovan’s Blog Post",
    "section": "",
    "text": "About this blog\nTesting this"
  },
  {
    "objectID": "posts/new-new-test-post/index.html",
    "href": "posts/new-new-test-post/index.html",
    "title": "Timnit Gebru",
    "section": "",
    "text": "from source import Perceptron\np = Perceptron()\n\nI did it!!\nnot implemented\nThis is an example of the blog posts that you’ll submit as your primary form of learning demonstration in CSCI 0451. I created this post by modifying the file posts/example-blog-post/index.ipynb in VSCode. You can also use JupyterLab for this editing if you prefer. Finally, it is possible to write blog posts without using notebooks by writing .qmd files, as illustrated here."
  },
  {
    "objectID": "posts/new-new-test-post/index.html#math",
    "href": "posts/new-new-test-post/index.html#math",
    "title": "Timnit Gebru",
    "section": "Math",
    "text": "Math\nIn addition to regular text using the Markdown specification, you can also write mathematics, enclosed between dollar signs. The syntax for writing math is very similar to the syntax used in the \\(\\LaTeX\\) markup language. For example, $f(x) \\approx y$ renders to \\(f(x) \\approx y\\). To place complex mathematical expressions on their own lines, use double dollar signs. For example, the expression\n$$\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2$$\nrenders to:\n\\[\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2\\;.\\]\nBehind the scenes, math is powered by the MathJax engine. For more on how to write math, check this handy tutorial and quick reference."
  },
  {
    "objectID": "posts/example-blog-post/index.html",
    "href": "posts/example-blog-post/index.html",
    "title": "Hello Blog",
    "section": "",
    "text": "from source import Perceptron\n\nImportError: cannot import name 'Perceptron' from 'source' (/Users/donovanwood/itsdwood.github.io-1/posts/example-blog-post/source.py)\nThis is an example of the blog posts that you’ll submit as your primary form of learning demonstration in CSCI 0451. I created this post by modifying the file posts/example-blog-post/index.ipynb in VSCode. You can also use JupyterLab for this editing if you prefer. Finally, it is possible to write blog posts without using notebooks by writing .qmd files, as illustrated here."
  },
  {
    "objectID": "posts/example-blog-post/index.html#math",
    "href": "posts/example-blog-post/index.html#math",
    "title": "Hello Blog",
    "section": "Math",
    "text": "Math\nIn addition to regular text using the Markdown specification, you can also write mathematics, enclosed between dollar signs. The syntax for writing math is very similar to the syntax used in the \\(\\LaTeX\\) markup language. For example, $f(x) \\approx y$ renders to \\(f(x) \\approx y\\). To place complex mathematical expressions on their own lines, use double dollar signs. For example, the expression\n$$\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2$$\nrenders to:\n\\[\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2\\;.\\]\nBehind the scenes, math is powered by the MathJax engine. For more on how to write math, check this handy tutorial and quick reference."
  },
  {
    "objectID": "posts/new-test-post/index.html",
    "href": "posts/new-test-post/index.html",
    "title": "Warmup Exercise Penquin",
    "section": "",
    "text": "This is an example of the blog posts that you’ll submit as your primary form of learning demonstration in CSCI 0451. I created this post by modifying the file posts/example-blog-post/index.ipynb in VSCode. You can also use JupyterLab for this editing if you prefer. Finally, it is possible to write blog posts without using notebooks by writing .qmd files, as illustrated here."
  },
  {
    "objectID": "posts/new-test-post/index.html#math",
    "href": "posts/new-test-post/index.html#math",
    "title": "Warmup Exercise Penquin",
    "section": "Math",
    "text": "Math\nIn addition to regular text using the Markdown specification, you can also write mathematics, enclosed between dollar signs. The syntax for writing math is very similar to the syntax used in the \\(\\LaTeX\\) markup language. For example, $f(x) \\approx y$ renders to \\(f(x) \\approx y\\). To place complex mathematical expressions on their own lines, use double dollar signs. For example, the expression\n$$\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2$$\nrenders to:\n\\[\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2\\;.\\]\nBehind the scenes, math is powered by the MathJax engine. For more on how to write math, check this handy tutorial and quick reference."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Awesome CSCI 0451 Blog",
    "section": "",
    "text": "Classifying Palmer Penguins\n\n\n\n\n\nMy first blog post, detailing my model for classifying Palmer Penguins\n\n\n\n\n\nFeb 19, 2024\n\n\nDonovan Wood\n\n\n\n\n\n\n\n\n\n\n\n\nSecond Post\n\n\n\n\n\nA new blog post that I just made!\n\n\n\n\n\nMar 10, 2023\n\n\nPhil Chodrow\n\n\n\n\n\n\n\n\n\n\n\n\nWarmup Exercise Penquin\n\n\n\n\n\nA new blog post that I just made!\n\n\n\n\n\nMar 10, 2023\n\n\nPhil Chodrow\n\n\n\n\n\n\n\n\n\n\n\n\nTimnit Gebru\n\n\n\n\n\nA new blog post that I just made!\n\n\n\n\n\nMar 10, 2023\n\n\nPhil Chodrow\n\n\n\n\n\n\n\n\n\n\n\n\nHello Blog\n\n\n\n\n\nAn example blog post illustrating the key techniques you’ll need to demonstrate your learning in CSCI 0451.\n\n\n\n\n\nJan 10, 2023\n\n\nPhil Chodrow\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/New-test-thing-post/index.html",
    "href": "posts/New-test-thing-post/index.html",
    "title": "Classifying Palmer Penguins",
    "section": "",
    "text": "Image source: @allisonhorst\n\n\nOur data set for these notes is Palmer Penguins. This data set contains physiological measurements and species labels for several populations of Adelie, Chinstrap, and Gentoo penguins."
  },
  {
    "objectID": "posts/New-test-thing-post/index.html#classifying-the-palmer-penguins",
    "href": "posts/New-test-thing-post/index.html#classifying-the-palmer-penguins",
    "title": "Classifying Palmer Penguins",
    "section": "",
    "text": "Image source: @allisonhorst\n\n\nOur data set for these notes is Palmer Penguins. This data set contains physiological measurements and species labels for several populations of Adelie, Chinstrap, and Gentoo penguins."
  },
  {
    "objectID": "posts/New-test-thing-post/index.html#abstract",
    "href": "posts/New-test-thing-post/index.html#abstract",
    "title": "Classifying Palmer Penguins",
    "section": "Abstract",
    "text": "Abstract\nIn this blog post we use a logistic regression model in order to classify Palmer penguins according to their Species. We find that using information such as the Island of the penguin as well as Culmen Depth (mm) and Culmen Length are sufficient features in order to provide an accurate classifying model. Within this blog post, we examine multiple data visualizations and tables in order to better understand the data and develop our reasoning for choosing the features of the model.\nBelow we will import the dataset we will use for this Blog Post\n\nimport pandas as pd\nimport numpy as np\ntrain_url = \"https://raw.githubusercontent.com/PhilChodrow/ml-notes/main/data/palmer-penguins/train.csv\"\ntrain = pd.read_csv(train_url)"
  },
  {
    "objectID": "posts/New-test-thing-post/index.html#data-preparation",
    "href": "posts/New-test-thing-post/index.html#data-preparation",
    "title": "Classifying Palmer Penguins",
    "section": "Data Preparation",
    "text": "Data Preparation\nIn order to prepare the qualitative columns in the data, we must convert categorical feature columns like Sex and Island into 0-1 columns using pd.get_dummies function.\nThe label column Species will also needed to be coded differently, using a LabelEncoder\nThe following function will take care of these processes:\n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(train[\"Species\"])\n\ndef prepare_data(df):\n  df = df.drop([\"studyName\", \"Sample Number\", \"Individual ID\", \"Date Egg\", \"Comments\", \"Region\"], axis = 1)\n  df = df[df[\"Sex\"] != \".\"]\n  df = df.dropna()\n  y = le.transform(df[\"Species\"])\n  df = df.drop([\"Species\"], axis = 1)\n  df = pd.get_dummies(df)\n  return df, y\n\nX_train, y_train = prepare_data(train)\n\n# Replace the column with the first word in each entry \ntrain[\"Species\"] = train[\"Species\"].str.split().str.get(0)"
  },
  {
    "objectID": "posts/New-test-thing-post/index.html#visualizations-of-the-data",
    "href": "posts/New-test-thing-post/index.html#visualizations-of-the-data",
    "title": "Classifying Palmer Penguins",
    "section": "Visualizations of the Data",
    "text": "Visualizations of the Data\nFor the dataset, I created two plots and one summary table in order to contextualize the data.\n\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n\nsns.scatterplot(train, x = \"Island\", y = \"Species\", hue = \"Species\", style = \"Species\")\n\n\n\n\n\n\n\nFigure 1: Island Distribution for Each Penguin Species\n\n\n\n\n\nAfter running through a multitude of different plots with varying sets of data, one combination that particularly stood out to me is shown in Figure 1. The plot shows the distribution of each species of Penguin on the three islands within the dataset. Now while it seems rather plain and simple at first glance, take note that for one of these islands (Torgersen), only one species of penguins resides there, that being Adeilie. Upon further investigation, for the remaining two islands, at most, only two differing penguin species reside there. Adelie inhabit all three islands while Chinstrap penguins reside only on the Dream island and Gentoo Penguins are only found on the Biscoe Island.\nThe reason as to why this rather simple analysis is so interesting as it presents a way in which we no longer have to compare all three species against one another at a given point. Rather, we can now determine whether the penguin presented to us is one of two species if the island is Dream or Biscoe. In the case of Torgersen, we automatically know the penguin will be Adelie as they are the only species of Penguins that reside there!\nThis knowledge, paired with two more quantitative features, should allow the model to classify a penguin more accurately!\n\nsns.scatterplot(train, x = \"Culmen Depth (mm)\", y = \"Culmen Length (mm)\", hue = \"Species\", style = \"Species\")\n\n\n\n\n\n\n\nFigure 2\n\n\n\n\n\nWith that idea now set. Let’s move on to the second visualization, shown by Figure 2. This is a more traditional scatterplot showing the distributions of Culmen_Depth and Culmen_Length for all three species of penguin.\nNow recalling ?@fig-scatterplot-island, the main relationships we want to focus on are Chinstrap vs Adelie and Gentoo vs Adelie as these are the only relationships where penguins coexist on the same island.\nAs we can see from the Figure 2. Gentoo penguins seem to exhbit a longer culmen length but shorter culmen depth.  Adelie penguins have a shorter culmen length compared to Gentoo penguins but a higher culmen depth.  Chinstrap penguins appear to have the longest average combination of culmen depth/length out of all the penguins.\nReferring back to those relationships as mentioned previously, Gentoo and Adelie penguins seem to have a clear divide amongst one another in terms of culmen length/depth. Chinstrap and Adelie penguins seem to overlap at some points in the graph but fairly slightly.\nAll things considered, given the properties of both ?@fig-scatterplot-island and Figure 2, the combination of these three features will be useful as a starting reference for my model.\n\n## Summary table for the mean body mass of each species of penguin by sex\n\nsummary_table = train.groupby(['Species', 'Sex']).agg({'Body Mass (g)': 'mean'})\n\nprint(summary_table)\n\n                  Body Mass (g)\nSpecies   Sex                  \nAdelie    FEMALE    3350.471698\n          MALE      4052.868852\nChinstrap FEMALE    3523.387097\n          MALE      4005.769231\nGentoo    .         4875.000000\n          FEMALE    4684.693878\n          MALE      5476.704545\n\n\nMy last visualization was a simple summary table of the mean body mass (g) of each penguin species by sex. I wanted to ensure that I was covering a large portion of the data, so by doing so, I can cover two features of the dataset I did not cover in the two previous data plots.\nAs a quick analysis:  Gentoo Males exhibit the largest mean body mass (g) out of all the male species  Similarly Gentoo females also exhibit the largest mean body mass (g) out of all the female species  In regards to Adelie and Chinstrap penguins, both males and females exhibit a similar mean mass (g) in relation to the other species.\nWith that in mind, the combination of body mass (g) and sex do not seem like a good pairing to use for predicition due to the similar nature of both Adelie and Chinstrap penguins."
  },
  {
    "objectID": "posts/New-test-thing-post/index.html#model-choices",
    "href": "posts/New-test-thing-post/index.html#model-choices",
    "title": "Classifying Palmer Penguins",
    "section": "Model Choices",
    "text": "Model Choices\nFor this blog, I used the combinations function from the itertools package in order to go through each variation of both qualitative and quantitative features.\n\nfrom itertools import combinations\n\nall_qual_cols = [\"Clutch Completion\", \"Sex\", \"Island\", \"Region\", ]\nall_quant_cols = ['Culmen Length (mm)', 'Culmen Depth (mm)', 'Flipper Length (mm)', 'Body Mass (g)']\n\nfor qual in all_qual_cols: \n  qual_cols = [col for col in X_train.columns if qual in col ]\n  for pair in combinations(all_quant_cols, 2):\n    cols = qual_cols + list(pair) \n\nI then utilized the LoigisticRegression model from sklearn in order to run tests for each iteration.\n\nfrom sklearn.linear_model import LogisticRegression\nfrom mlxtend.plotting import plot_decision_regions # for visualization later\n\ncols = ['Culmen Length (mm)', 'Culmen Depth (mm)', 'Island_Biscoe', 'Island_Dream', 'Island_Torgersen']\n\nLR = LogisticRegression(max_iter=10000)\nLR.fit(X_train[cols], y_train)\nLR.score(X_train[cols], y_train)\n\n0.99609375\n\n\nGoing through each iteration, I scored each of them found below:\n[‘Clutch Completion_No’, ‘Clutch Completion_Yes’, ‘Culmen Length (mm)’, ‘Body Mass (g)’] : .91  [‘Clutch Completion_No’, ‘Clutch Completion_Yes’, ‘Culmen Depth (mm)’, ‘Flipper Length (mm)’]: .91  [‘Clutch Completion_No’, ‘Clutch Completion_Yes’, ‘Culmen Depth (mm)’, ‘Body Mass (g)’] : .76  [‘Clutch Completion_No’, ‘Clutch Completion_Yes’, ‘Flipper Length (mm)’, ‘Body Mass (g)’] : .63  [‘Sex_FEMALE’, ‘Sex_MALE’, ‘Culmen Length (mm)’, ‘Culmen Depth (mm)’] : .992  [‘Sex_FEMALE’, ‘Sex_MALE’, ‘Culmen Length (mm)’, ‘Flipper Length (mm)’] : .98  [‘Sex_FEMALE’, ‘Sex_MALE’, ‘Culmen Length (mm)’, ‘Body Mass (g)’] : .98  [‘Sex_FEMALE’, ‘Sex_MALE’, ‘Culmen Depth (mm)’, ‘Flipper Length (mm)’] : .82  [‘Sex_FEMALE’, ‘Sex_MALE’, ‘Culmen Depth (mm)’, ‘Body Mass (g)’] : .77  [‘Sex_FEMALE’, ‘Sex_MALE’, ‘Flipper Length (mm)’, ‘Body Mass (g)’] : .71  [‘Island_Biscoe’, ‘Island_Dream’, ‘Island_Torgersen’, ‘Culmen Length (mm)’, ‘Culmen Depth (mm)’] : .996  [‘Island_Biscoe’, ‘Island_Dream’, ‘Island_Torgersen’, ‘Culmen Length (mm)’, ‘Flipper Length (mm)’]: .97  [‘Island_Biscoe’, ‘Island_Dream’, ‘Island_Torgersen’, ‘Culmen Length (mm)’, ‘Body Mass (g)’]: .97  [‘Island_Biscoe’, ‘Island_Dream’, ‘Island_Torgersen’, ‘Culmen Depth (mm)’, ‘Flipper Length (mm)’]:.88  [‘Island_Biscoe’, ‘Island_Dream’, ‘Island_Torgersen’, ‘Culmen Depth (mm)’, ‘Body Mass (g)’]: .83  [‘Island_Biscoe’, ‘Island_Dream’, ‘Island_Torgersen’, ‘Flipper Length (mm)’, ‘Body Mass (g)’] : .75"
  },
  {
    "objectID": "posts/New-test-thing-post/index.html#testing",
    "href": "posts/New-test-thing-post/index.html#testing",
    "title": "Classifying Palmer Penguins",
    "section": "Testing",
    "text": "Testing\nIn order to test the model, I am downloading the dataset and preparing it via the prepare_data function\n\ntest_url = \"https://raw.githubusercontent.com/PhilChodrow/ml-notes/main/data/palmer-penguins/test.csv\"\ntest = pd.read_csv(test_url)\n\nX_test, y_test = prepare_data(test)\nLR.score(X_test[cols], y_test)\n\n1.0\n\n\nAwesome! Our model is able to classify the three species of penguins with 100 percent accuracy.\n\n\n\n\n\n\nFigure 3: Image"
  },
  {
    "objectID": "posts/New-test-thing-post/index.html#plotting-decision-regions",
    "href": "posts/New-test-thing-post/index.html#plotting-decision-regions",
    "title": "Classifying Palmer Penguins",
    "section": "PLotting Decision Regions",
    "text": "PLotting Decision Regions\nI will be using the plot_regions function below in order to plot my decision regions for my model.\n\nfrom matplotlib.patches import Patch\n\ndef plot_regions(model, X, y):\n    \n    x0 = X[X.columns[0]]\n    x1 = X[X.columns[1]]\n    qual_features = X.columns[2:]\n    \n    fig, axarr = plt.subplots(1, len(qual_features), figsize = (7, 3))\n\n    # create a grid\n    grid_x = np.linspace(x0.min(),x0.max(),501)\n    grid_y = np.linspace(x1.min(),x1.max(),501)\n    xx, yy = np.meshgrid(grid_x, grid_y)\n    \n    XX = xx.ravel()\n    YY = yy.ravel()\n\n    for i in range(len(qual_features)):\n      XY = pd.DataFrame({\n          X.columns[0] : XX,\n          X.columns[1] : YY\n      })\n\n      for j in qual_features:\n        XY[j] = 0\n\n      XY[qual_features[i]] = 1\n\n      p = model.predict(XY)\n      p = p.reshape(xx.shape)\n      \n      \n      # use contour plot to visualize the predictions\n      axarr[i].contourf(xx, yy, p, cmap = \"jet\", alpha = 0.2, vmin = 0, vmax = 2)\n      \n      ix = X[qual_features[i]] == 1\n      # plot the data\n      axarr[i].scatter(x0[ix], x1[ix], c = y[ix], cmap = \"jet\", vmin = 0, vmax = 2)\n      \n      axarr[i].set(xlabel = X.columns[0], \n            ylabel  = X.columns[1], \n            title = qual_features[i])\n      \n      patches = []\n      for color, spec in zip([\"red\", \"green\", \"blue\"], [\"Gentoo\", \"Chinstrap\", \"Adelie\"]):\n        patches.append(Patch(color = color, label = spec))\n\n      plt.legend(title = \"Species\", handles = patches, loc = \"best\")\n      \n      plt.tight_layout()\n\nFor the purposes of this blog post, we will look at the decision regions for both our training data and our testing data\n\nplot_regions(LR, X_train[cols], y_train)\n\n\n\n\n\n\n\nFigure 4: Decision Regions for each island based on training data\n\n\n\n\n\nThe three plots above correspond to the decision regions for each island. As previously mentioned in the data visualization section, we see that for the Biscoe and Dream islands, there are only two species of penguins. For the Torgersen island, only the Adelie penguins reside there. As predicted, this results in comparing at most only two species of penguins against one another, allowing for easier classification.\nThe following section displays the decision regions our model makes for the testing data.\n\nplot_regions(LR, X_test[cols], y_test)\n\n\n\n\n\n\n\nFigure 5: Decision Regions for each island based on testing data\n\n\n\n\n\nOur testing data yielded a smaller number of penguins to be classified, but our classifier was able to accurately predict each species of penguin based on our three features of Island, Culmen Depth (mm), and Culmen Length (mm)\nWhile the penguins on the Torgersen would always be Adelie, and were classified as such. The closest decision region our model came to for classification of the test data was a penguin on the Dream Island. This was anticipated however as in Figure 2, Adelie and Chinstrap penguins share some overlapping points in regards to Culmen Depth (mm) and Culmen Length(mm)"
  },
  {
    "objectID": "posts/New-test-thing-post/index.html#confusion-matrix",
    "href": "posts/New-test-thing-post/index.html#confusion-matrix",
    "title": "Classifying Palmer Penguins",
    "section": "Confusion Matrix",
    "text": "Confusion Matrix\nI will be using a confusion matrix for my model, evaluated on the test set.\nIn order to do this I will be using confusion_matrix from the sklearn package.\n\nfrom sklearn.metrics import confusion_matrix\n\ny_test_pred = LR.predict(X_test[cols])\nC = confusion_matrix(y_test, y_test_pred)\nC\n\narray([[31,  0,  0],\n       [ 0, 11,  0],\n       [ 0,  0, 26]])\n\n\nIn this confusion matrix, due to our 100 percent prediction accuracy, we do not see any errors within our matrix. As a reference, the confusion matrix just gives the number of data points that have the correct label.\nLogically, since our model predicts each penguin correctly, there will be disparities in the matrix.\nThat being said, as previously mentioned, the most likely error to occur within our model is classifying a penguin from the Dream island. This is due to the Adelie and Chinstrap penguins sharing the most similar distributions of Culmen Depth (mm) and Culmen Length (mm) which depending on the penguin’s dimensions, has the highest likelihood out of all the species to overlap in the incorrect species decision region."
  },
  {
    "objectID": "posts/New-test-thing-post/index.html#discussion",
    "href": "posts/New-test-thing-post/index.html#discussion",
    "title": "Classifying Palmer Penguins",
    "section": "Discussion",
    "text": "Discussion\nIn this blog post, I have found that the using Island, Culmen Depth (mm), and Culmen Length (mm) features in a logistic regression model are useful for accurately classifying species of penguins pertaining to Adelie, Gentoo, and Chinstrap.\nI have found that Adelie penguins reside in all three islands (Dream, Biscoe, Torgersen), while Gentoo penguins only reside on the Biscoe island and Chinstrap penguins only inhabit the Biscoe island.\nIn terms of Culmen Length (mm) and Culmen Depth (mm) we found that:\nGentoo penguins seem to exhbit a longer culmen length but shorter culmen depth.  Adelie penguins have a shorter culmen length compared to Gentoo penguins but a higher culmen depth.  Chinstrap penguins appear to have the longest average combination of culmen depth/length out of all the penguins.\nIn terms of Body Mass (g) we found that:\nGentoo penguins, both male and female, have the highest mean body mass out of all species of penguins.\nAdelie and Chinstrap penguins exhibit similar mean body mass to one another for both male and female."
  }
]